#Insertion sort

num_list = [1, 9, 3, 6, 7, 0, 4, 9, 5, 5]

for i in range(1, len(num_list)):
    comp = num_list[i]
    while comp < num_list[i - 1] and i >= 1:
        num_list[i - 1], num_list[i] = num_list[i], num_list[i - 1]
        i -= 1

print(num_list)


#Merge sort

num_list = [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]


def merge(left, right):
    result = [0] * len(left + right)
    i = 0
    l = 0
    r = 0
    while r <= len(right) - 1 or l <= len(left) - 1:
        if l > len(left) - 1:
            result[i] = right[r]
            r += 1
            i += 1
            continue
        elif r > len(right) - 1:
            result[i] = left[l]
            l += 1
            i += 1
            continue
        if left[l] <= right[r]:
            result[i] = left[l]
            i += 1
            l += 1
        else:
            result[i] = right[r]
            i += 1
            r += 1
    return result

def merge_sort(data):
    if len(data) <= 1:
        return data
    left = data[:len(data)//2]
    right = data[len(data)//2:]

    left = merge_sort(left)
    right = merge_sort(right)

    return merge(left, right)

print(merge_sort(num_list))

#Priority queue

class Node:

    def __init__(self, data, link = None):

        self.data= data

        self.link = link



def Enqueue(item):

    global head

    newNode = Node(item)

    if head == None:

        head = newNode

    else:

        p = head

        while p.link:

            p = p.link

        p.link = newNode



head = None

Enqueue(1)

Enqueue(2)

Enqueue(5)

Enqueue(4)

Enqueue(3)

p = head


while p:

    print(p.data)

    p = p.link