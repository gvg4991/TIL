#1 농작물
for tc in range(int(input())) :
    n = int(input())
    p = [input() for i in range(n)]
    x = y = n//2
    r = 0
    for i in range(n):
        for j in range(n) :
            if abs(x - i) + abs(y - j) <= n//2 :
                r+=int(p[i][j])
    print('#{} {}'.format((tc+1),r))

#2 다솔이
def f() :
    print('..#..', end='')
    [print('.#..', end='') for i in range(len(Data) - 1)]
    print()
def s():
    print('.', end='')
    [print('#.', end='') for i in range((len(Data)) * 2)]
    print()
for tc in range(int(input())) :
    Data = input()
    f()
    s()
    print('#',end='')
    [print('.{}.#'.format(Data[i]), end='') for i in range(len(Data))]
    print()
    s()
    f()

#3 단조
def check(item) :
    if item < 10 :
        return True
    temp = 0
    while item > 0 :
        temp = item%10
        item //= 10
        if item%10 > temp :
            return False
    return True

for tc in range(int(input())) : 
    n = int(input())
    Data = list(map(int,input().split()))
    result = -1
    for i in range(n-1,-1,-1) :
        for j in range(i-1,-1,-1) :
            if result < Data[i]*Data[j] :
                if check(Data[i]*Data[j]) :
                    result = Data[i]*Data[j]
    print('#{} {}'.format((tc+1),result))

#4 사칙연산
def postorder(r) :
    if left[r] > 0:
        postorder(left[r])
    if right[r] > 0 :
        postorder(right[r])
    if tree[r].isdigit()  :
        stack.append(int(tree[r]))
    print(tree[r],end=' ')
    if len(stack) > 1:
        if tree[r] == '+' :
            item2 = stack.pop()
            item1 = stack.pop()
            stack.append(item1+item2)
        if tree[r] == '-' :
            item2 = stack.pop()
            item1 = stack.pop()
            stack.append(item1-item2)
        if tree[r] == '*' :
            item2 = stack.pop()
            item1 = stack.pop()
            stack.append(item1*item2)
        if tree[r] == '/' :
            item2 = stack.pop()
            item1 = stack.pop()
            stack.append(item1/item2)

for tc in range(1,11) :
    n = int(input())
    left = [0]*(n+1)
    right = [0]*(n+1)
    tree = [0]*(n+1)
    for i in range(n) :
        Data = input().split()
        tree[int(Data[0])] = Data[1]
        if len(Data) >= 3 :
            left[int(Data[0])] = int(Data[2])
        if len(Data) == 4 :
            right[int(Data[0])] = int(Data[3])
    stack = []
    postorder(1)
    print('#{} {}'.format(tc,int(stack[0])))

#5 파스칼
def pascal(pos) :
    if pos == n+1 :
        return
    if pos == 1 :
        print(1)
        item[0].append(1)
    if pos == 2 :
        print(1,1)
        item[1].append(1)
        item[1].append(1)
    if pos > 2 :
        item[pos-1].append(1)
        for k in range(len(item[pos-2])-1) :
            item[pos-1].append(item[pos-2][k]+item[pos-2][k+1])
        item[pos-1].append(1)
        print(' '.join(list(map(str,item[pos-1]))))
    pascal(pos+1)
for tc in range(int(input())) :
    n = int(input())
    item = [[] for i in range(n)]
    print('#{}'.format(tc+1))
    pascal(1)

#6 예산관리
max_m = int(input())
n = int(input())
Data = list(map(int,input().split()))
my_max = 0
temp_sum = 0
def DFS(pos) :
    global my_max,temp_sum
    if pos >= n :
        return
    if temp_sum > max_m :
        return
    if temp_sum > my_max :
        my_max = temp_sum

    temp_sum += Data[pos]
    DFS(pos+1)
    temp_sum-=Data[pos]
    DFS(pos + 1)
DFS(0)
print(my_max)

#7 조합
def dfs(pos) :
    if pos > c :
        return
    if len(Data) == r:
        print(Data)
        return
    Data.append(pos+1)
    dfs(pos+1)
    Data.pop()
    dfs(pos+1)
c = 3
r = 2
Data = []
dfs(0)


#8 소방차
# def dfs(pos,temp) :
#     global my_min
#     if temp > my_min :
#         return
#     if pos >= f :
#         if my_min > temp :
#             my_min = temp
#         return
#     for i in range(pos,pos+p-f+1) :
#         if visited[i] :
#             item = abs(fire[pos]-pump[i])
#             temp += item
#             visited[i] = 0
#             dfs(pos+1,temp)
#             temp -= item
#             visited[i] = 1
#

def search():
    global my_min
    temp = 0
    __fire = _fire[:]
    _visited = visited[:]
    temp1 = 0
    while __fire:
        # if flag :
        #     item = _fire.pop(0)
        # else :
        if my_min < temp1:
           break
        item = __fire.pop()
        i = item
        j = item
        while i > 0:
            i -= 1
            if _visited[i] < 0:
                break
        while j < p + f + 1:
            j += 1
            if _visited[j] < 0:
                break
        t1 = abs(pump[item] - pump[i])
        t2 = abs(pump[item] - pump[j])
        if t1 < t2:
            temp1 += t1
            _visited[i] = 1
        else:
            temp1 += t2
            _visited[j] = 1
    if my_min > temp1 :
        my_min = temp1
    # print(temp1,temp)

#소방차
p,f = map(int,input().split())
pump = list(map(int,input().split()))
fire = list(map(int,input().split()))
_fire = []
visited = [-1] * (p+f+2)

my_min = 98881000000
cnt = 0
flag = True
for i in fire :
    while True :
        if cnt == len(pump) :
            pump.append(i)
            _fire.append(cnt+1)
            visited[cnt+1] = 1
            flag = False
            break
        if i > pump[cnt] :
            cnt += 1
        else :
            pump.insert(cnt,i)
            _fire.append(cnt+1)
            visited[cnt+1] = 1
            cnt+=1
            break
pump.append(98881000000)
pump.insert(0,98881000000)
for i in range(f+1) :
    item = _fire.pop(0)
    search()
    _fire.append(item)
# print(pump)
# print(_fire)

print(my_min)