1. 다이아몬드 장식
for tc in range(int(input())):
    str1 = input()

    print('{}.'.format(''.join(['..#.'] * len(str1))))
    print('{}.'.format(''.join(['.#']*len(str1)*2)))

    for i in range(len(str1)):
        print('#.{}.'.format(str1[i]), end="")
    print('#')

    print('{}.'.format(''.join(['.#'] * len(str1) * 2)))
    print('{}.'.format(''.join(['..#.'] * len(str1))))


2. 정곤이의 단조 증가하는 수
def GetSome():
    global MAX
    for i in range(N-1):
        for j in range(i+1,N):
            num = value = Data[i]*Data[j]
            while value!=0:
                temp = value%10
                value//=10
                if temp < value%10:
                    break
            else:
                if num > MAX : MAX = num

for tc in range(1, int(input())+1):
    N = int(input())
    Data = list(map(int, input().split()))
    MAX = -1
    GetSome()
    print('#{} {}'.format(tc, MAX))

3. 농작물 수확하기
for tc in range(1, int(input())+1):
    N = int(input())
    Data = [[int(x) for x in input()] for _ in range(N)]
    alpha = profit = 0
    pos = N//2
    for i in range(N):
        for j in range(pos-alpha, pos+alpha+1, 1):
            profit += Data[i][j]
        alpha += 1 if i < pos else -1
    print('#{} {}'.format(tc, profit))

4. 치즈
dy = [-1, 1, 0, 0 ]
dx = [0, 0, -1, 1]

def notIsDone():
    cnt = 0
    for y in range(Y):
        for x in range(X):
            if MyMap[y][x] <= 0: MyMap[y][x] = 0
            elif MyMap[y][x] <=2: cnt += 1; MyMap[y][x] = 1
            else: MyMap[y][x] = 0
    return cnt

def IsPossible(y, x):
    if 0 <= y < Y and 0 <= x < X and MyMap[y][x] >= 0:
        return True
    else: return False

def GetSome(y, x):
    global front, rear
    rear = (rear+1)%len(Q)
    Q[rear] = (y,x)
    while front != rear:
        front = (front+1)%len(Q)
        y, x = Q[front][0], Q[front][1]
        for dir in range(4):
            if IsPossible(y+dy[dir], x+dx[dir]):
                nextY, nextX = y+dy[dir], x+dx[dir]
                if MyMap[nextY][nextX] <= 0:
                    MyMap[nextY][nextX] = -1
                    rear = (rear+1)%len(Q)
                    Q[rear] = (nextY, nextX)
                else:
                    MyMap[nextY][nextX] +=1

Y, X = map(int, input().split())
MyMap = [0 for _ in range(Y)]
for i in range(Y):
    MyMap[i] = list(map(int, input().split()))

Q = [0]*10000
front = rear = 0

cnt = 0
hour = 0
while notIsDone():
    GetSome(0, 0)
    hour += 1
    ans = cnt
print(hour)


5. 조합
def combination(n, r , i , d):
    global data
    if r == 0:
        print(d)
        return
    if i==n: return

    combination(n, r-1, i+1, d+[data[i]])
    combination(n, r, i+1, d)

data = [1,2,3,4,5]
combination(len(data), 3, 0, [])

6. 사칙연산
def mycalc(T):
    if T:
        LVal = mycalc(Tree[T][1])
        RVal = mycalc(Tree[T][2])
        if Tree[T][0] == '+':
            return LVal+RVal
        elif Tree[T][0] == '-':
            return LVal - RVal
        elif Tree[T][0] == '*':
            return LVal * RVal
        elif Tree[T][0] == '/':
            return LVal / RVal
        else:
            return float(Tree[T][0])
    return

for tc in range(1, 11):
    N = int(input())
    Data = [0 for _ in range(N+1)]

    # 정점의 값, 왼쪽정점번호, 오른쪽정점번호, 부모의정점번호
    Tree = [[0]*3 for _ in range(N+1)]
    for i in range(1, N+1):
        # 정점번호, 정점의 값, 왼쪽정점번호, 오른쪽정점번호
        Data[i] = input().split()
        if len(Data[i]) == 4:
            Tree[i][0] = Data[i][1] # 연산자
            Tree[i][1] = int(Data[i][2]) # 왼쪽
            Tree[i][2] = int(Data[i][3]) # 오른쪽
        else:
            Tree[i][0] = Data[i][1] # 정점의 값 (value)
    print('#{} {}'.format(tc, int(mycalc(1))))

7. 파스칼의 삼격형
arr = [0]*(1<<20)
def pascal():
    global N
    now = 0
    for i in range(1, N+1):
        for j in range(i):
            if j == 0 or j == i-1:
                arr[now] = 1
            else:
                arr[now] = arr[now-i] +arr[now-i+1]
            print(arr[now], end=" ")
            now +=1
        print()

for tc in range(1, int(input())+1):
    N = int(input())

    print('#{}'.format(tc))
    pascal()