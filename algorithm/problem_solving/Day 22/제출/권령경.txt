# 2진수 변환 

import sys
sys.stdin = open("input1.txt", "r")

num_list = list(input())
result = []
num_sum = 0
i = 0
while i in range(len(num_list)):
    if num_list[i] == ' ':
        num_list.remove(num_list[i])
    else:
        i += 1
pos = 0
for j in range(len(num_list)):
    pos += 1
    if int(num_list[j]) == 1:
        num_sum += 2 ** (7 - pos)
    else:
        num_sum += 0
    if pos % 7 == 0:
        pos = 0
        result.append(num_sum)
        num_sum = 0

print(result)

# 변환

digit = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
data = [0, 'F', 9, 7, 'A', 3]
fourbit = [0, 0, 0, 0]
num_list = []
result = []
num_sum = 0
pos = 0

for i in range(len(data)):
    if data[i] not in digit:
        data[i] = ord(data[i]) - 55

j = 0
check1 = False
check2 = False
for order in range(len(fourbit)):
    if data[order] < 4 and not check1:
        fourbit[order] = 0
        check1 = True
    else:
        fourbit[order] = data[j] % 2

while data:
    if data[j] < 8:
        fourbit[0] = 0
        order += 1
    fourbit[order] = data[j] % 2
    order += 1
    data[j] = data[j] >> 1
    if data[j] == 0:
        j += 1
        order = 0

for c in range(len(num_list)):
    pos += 1
    if int(num_list[c]) == 1:
        num_sum += 16 ** (7 - pos)
    else:
        num_sum += 0
    if pos % 7 == 0:
        pos = 0
        result.append(num_sum)
        num_sum = 0



# 암호

data = [0, 'D', 'E', 'C']
digit = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

hexadecimal = ['0000', '0001', '0010', '0011', '0100', '0101', '0110', '0111', '1000', '1001', '1010', '1011', '1100', '1101', '1110', '1111']
result = ''
for i in range(len(data)):
    if data[i] not in digit:
        data[i] = ord(data[i]) - 55
        data[i] =hexadecimal[data[i]]
        result += data[i]
    else:
        data[i] = hexadecimal[data[i]]
        result += data[i]

cipher = ['001101', '010011', '111011', '110001', '100011', '110111', '001011', '111101', '011001', '101111']

start = 0
while start + 6 < len(result):
    comp = ''
    for d in range(start, start + 6):
        comp += result[d]
    if comp in cipher:
        print(cipher.index(comp), end =' ')
        start += 6
    else:
        start += 1



# 단순 2진 암호코드

import sys
sys.stdin = open("binary_cipher.txt", "r")

T = int(input())
decrypt = ['0001101', '0011001', '0010011', '0111101', '0100011', '0110001', '0101111', '0111011', '0110111', '0001011']
for test_case in range(1, T+1):
    N, M = map(int, input().split())
    test = [[0] for i in range(N)]
    result = []
    for n in range(N):
        test[n] = list(map(int, input()))

    for j in range(N):
        i = 0
        start = M - i - 1
        while start >= 0 and test[j][start] == 0:
            i += 1
            start = M - i - 1
        while j and start > 0:
            if len(result) < 8:
                cipher_list = ''
                for num in range(start, start - 7, -1):
                    cipher_list += str(test[j][num])
                if cipher_list[::-1] in decrypt:
                    rev = cipher_list[::-1]
                    result.append(decrypt.index(rev))
                start -= 7
            else:
                break
        if len(result) == 8:
            break

    num_sum = 0
    result.reverse()
    if ((result[0] + result[2] + result[4] + result[6]) * 3 + result[1] +result[3] +result[5] + result[7]) % 10 == 0:
        num_sum = result[0] + result[1] + result[2] + result[3] + result[4] +result[5] +result[6] + result[7]

    print("#%d, %d" %(test_case, num_sum))