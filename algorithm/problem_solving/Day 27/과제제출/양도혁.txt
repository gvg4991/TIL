#1 랜선자르기
k, n = map(int,input().split())
data = []
for i in range(k) :
    data.append(int(input()))
max_v = max(data)
min_v = 1
while min_v <= max_v :
    to = 0
    mid = (max_v+min_v)//2
    for i in data :
        to += i//mid
    if to >= n :
        min_v = mid + 1
    else :
        max_v = mid - 1
print(max_v)

#2 멱수
def power1(a,b) :
    ans = 1
    while b > 0 :
        if b&1 : ans *= a
        a = a*a
        b //= 2
    return ans

print(power1(2,4))

#3 트리순회
# def check(istart,iend,pstart,pend) :
#     if istart > iend or pstart > pend:
#         return
#
#     root = check2[pend]
#     print(root, end=' ')
#     pos = 0
#     for i in range(istart,iend+1) :
#         if root == check1[i] :
#             pos = i
#             break
#     left = pos-istart
#     check(istart,pos-1,pstart,pstart+left-1)
#     check(pos+1, iend,pstart+left,pend-1)
#
# n = int(input())
# check1 = list(map(int,input().split()))
# check2 = list(map(int,input().split()))
# # print(check2[n-1])
# check(0,n-1,0,n-1)

#4 quick sort
data = [11,45,23,81,28,34]
# data = [11,45,22,81,23,34,99,22,17,8]
# data = [1,1,1,1,1,0,0,0,0,0]
def partion(f,t) :
    pivot = data[(f + t) // 2]
    i = f
    j = t
    while i < j:
        while data[i] < pivot:
            i += 1
        while data[j] > pivot:
            j -= 1
        if i < j:
            data[i], data[j] = data[j], data[i]
    # data[f],data[j] = data[j],data[f]
    return i
def quicksort(f,t) :
    if f < t :
        i = partion(f,t)
        quicksort(f,i-1)
        quicksort(i+1,t)

quicksort(0,len(data)-1)
print(data)


#5 종이자르기
n = int(input())
Data = []
for i in range(n) :
    Data.append(list(map(int,(input().split()))))
# print(Data)
res =[0,0,0]

def dnq(x1,y1,x2,y2) :
    temp = Data[y1][x1]
    chk = 1
    # print(x1,y1,x2,y2)
    r = (x2 - x1 + 1) // 3
    for i in range(x1,x2+1) :
        for j in range(y1,y2+1) :
            if temp != Data[j][i] :
                chk = 0
                break
    if chk :
        if temp == -1 :
            res[0] += 1
        elif temp == 0 :
            res[1] += 1
        elif temp == 1:
            res[2] += 1
        return
    else :
        dnq(x1, y1, x1 + r - 1, y1 + r - 1)
        dnq(x1+r, y1, x1 + r + r - 1, y1 + r - 1)
        dnq(x1+r+r, y1, x1+r+r + r - 1, y1 + r - 1)
        dnq(x1, y1+r, x1 + r - 1, y1 +r + r - 1)
        dnq(x1+r, y1+r, x1+r + r - 1, y1 +r + r - 1)
        dnq(x1+r+r, y1+r, x1+r+r + r - 1, y1 +r + r - 1)
        dnq(x1, y1 +r+ r, x1 + r - 1, y1 +r + r + r - 1)
        dnq(x1 + r, y1+r + r, x1 + r + r - 1, y1+r  + r + r - 1)
        dnq(x1 + r + r, y1 +r + r, x1 + r + r + r - 1, y1 +r + r + r - 1)
dnq(0,0,n-1,n-1)
for i in res :
    print(i)
