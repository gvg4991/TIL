1. 종이의 개수
def IsSame(y, x, size):
	t = Data[y][x]
	for i in range(y, y + size):
		for j in range(x, x + size):
			if t != Data[i][j]:
				return False
	return True

def GetSome(y, x, size):
	if size == 1:
		res[Data[y][x]+1] += 1
		return

	if IsSame(y, x, size): res[Data[y][x]+1] += 1; return # -1, 0, 1
	else:
		next = size // 3
		for i in range(3):
			for j in range(3):
				GetSome(y + i * (next), x + j * (next), next)


N = int(input())
Data = [list(map(int, input().split()))for _ in range(N)]
res=[0,0,0]
GetSome(0, 0, N)
for i in res:
	print(i)

2. 멱수의 다양한 방법
def power(a, b):
	if b == 1: return a
	return a*power(a, b-1)

def power2(a, b): # O(logn)
	if b == 0: return 1
	elif b == 1: return a
	if b&1:
		temp = power2(a, (b-1)//2)
		return a*temp*temp
	else:
		temp = power2(a, b//2)
		return temp*temp

def power3(a, b):
	ans = 1
	while b > 0:
		if b&1: ans*=a
		a = a*a
		b//=2
	return ans

print(power2(2, 5))
print(power3(2,5))

3. 연습문제1 Quick sort
def partition(A, p, r):
	x = A[r]
	i = p - 1
	for j in range(p, r):
		if A[j] <= x:
			i+=1
			A[i], A[j] = A[j], A[i]
	A[i+1], A[r] = A[r], A[i+1]
	return i+1

def quickSort(A, l, r):
	if l < r:
		s = partition(A, l, r)
		quickSort(A, l, s-1)
		quickSort(A, s+1, r)


for tc in range(3):
	Data = list(map(int, input().split()))
	quickSort(Data, 0, len(Data)-1)
	print(Data)

4. 트리의 순회
def GetSome(in_s, in_e, post_s, post_e):
	if post_s <= post_e:
		root = postOrder[post_e]
		print(root, end=" ")
		i = in_s
		for i in range(in_s, in_e):
			if inOrder[i] == root:
				break
		left_num = i - in_s
		right_num = in_e - i
		GetSome(in_s, in_s+left_num-1, post_s, post_s+left_num-1)
		GetSome(in_e-right_num+1, in_e, post_e-right_num, post_e-1)

n = int(input())
inOrder = list(input().split())
postOrder = list(input().split())

GetSome(0, n-1, 0, n-1)


5. 랜선 자르기
def GetSome(mid):
    res = 0
    for i in range(K):
        res+=Line[i]//mid
    return res

K, N = map(int, input().split())
Line = [int(input()) for x in range(K)]

low = 0
high = 2*max(Line)

while(1):
    mid = (low+high)//2
    Lan_cnt = GetSome(mid)

    if high-1 == low: #
        break
    if Lan_cnt < N:
        high = mid # 랜 길이가 줄어들어야한다.
    else:
        low = mid # 랜길이가 더 길어야한다
print(mid)
