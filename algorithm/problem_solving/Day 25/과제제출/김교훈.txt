[최소합]
TC=int(input())
for tc in range(1,TC+1):
    N= int(input())

    my_map = []
    for i in range(0,N):
        line=[]
        line=list(map(int,input().split()))
        my_map.append(line
                      )
    start=0
    end=N-1
    def is_safe(Y,X):
        if -1<Y<N and -1<X<N:
            return True
        else:
            return False
    dy=[1,0]
    dx=[0,1]
    now_min=987554
    def go(now_y,now_x,now_sum):
        global now_min
        if now_sum>=now_min:
            return
        if now_y==end and now_x==end:
            now_min=now_sum
            return


        for dir in range(0,2):
            if is_safe(now_y+dy[dir], now_x+dx[dir]):
                go(now_y+dy[dir],now_x+dx[dir],now_sum+my_map[now_y+dy[dir]][now_x+dx[dir]])

    go(0,0,my_map[0][0])
    print("#{} " .format(tc),end='')
    print(now_min)

[전자카트]
TC=int(input())
for tc in range(1,TC+1):
    N= int(input())

    my_map = []
    for i in range(0,N):
        line=[]
        line=list(map(int,input().split()))
        my_map.append(line)

    min_sum=987654
    checker=[0]*N


    def GO(now_y,now_sum,now_count):
        global min_sum

        checker[now_y]=1
        if now_sum>min_sum:
            return

        if now_count==N-1:
            now_sum=now_sum+my_map[now_y][0]
            if now_sum<min_sum:
                min_sum=now_sum
            return

        for next in range(0,N):
            if checker[next]==0:
                GO(next,now_sum+my_map[now_y][next],now_count+1)
                checker[next] = 0
        return

    GO(0,0,0)
    print("#{} ".format(tc),end="")
    print(min_sum)

[컨테이너]
TC=int(input())
for tc in range(1,TC+1):
    N_M = list(map(int,input().split()))
    N=N_M[0]
    M=N_M[1]
    
    container_weight = list(map(int,input().split()))
    truck_capa = list(map(int,input().split()))
    
    container_weight.sort(reverse=True)
    truck_capa.sort(reverse=True)
    
    container_index=0
    truck_index=0
    
    # checker_truck=[0]*M
    # checker_con=[0]*N
    all_sum=0
    
    while(1):
    
        if container_index==N:
            break
        if truck_index==M:
            break
        if container_weight[container_index]<=truck_capa[truck_index]:
            all_sum = all_sum + container_weight[container_index]
            # checker_con[container_index] = 1
            # checker_truck[truck_index] = 1
            truck_index= truck_index+1
            container_index=container_index+1
    
        else:
            container_index=container_index+1
    print("#{} ".format(tc),end='')
    print(all_sum)
    
[화물도크] (그리디)
TC=int(input())
for tc in range(1,TC+1):
    N = int(input())
    schdule = []
    for i in range(0, N):
        line = list(map(int, input().split()))
        schdule.append(line)
        for i in range(0,len(schdule)):
            for j in range(i,len(schdule)):
                if schdule[i][1] > schdule[j][1]:
                    schdule[i],schdule[j]=schdule[j],schdule[i]

    max_count = 0
    # print(schdule)
    ans=[]
    while(1):
        here=schdule[0]
        ans.append(here)
        schdule.pop(0)
        j=0
        for i in range(0,len(schdule)):
            if here[1]>schdule[i][0]:
                j=j+1
            else:
                break
        if j>0:
            for j in range(0,j):
                schdule.pop(0)
        if len(schdule)==0:
            break
    print("#{} ".format(tc),end='')
    # print(ans)
    print(len(ans))


[화물도크] (순열 완탐)
import sys
sys.stdin=open("input.txt","r")
TC=int(input())
for tc in range(1,TC+1):
    N=int(input())

    schdule=[]
    for i in range(0,N):
        line=list(map(int,input().split()))
        schdule.append(line)


    fuel=[1]*N
    schdule_checker=[0]*24
    max_count=0
    def go(now_index):
        global max_count

        for k in range(0,24):
            if schdule_checker[k]>1:
                return

        if max_count<now_index:
            max_count=now_index

        if now_index==N:
            max_count=now_index
            return

        for i in range(0,N):
            if fuel[i]>0:
                fuel[i]=0

                for working in range(schdule[i][0],schdule[i][1]):
                    schdule_checker[working]=schdule_checker[working]+1
                go(now_index+1)
                for working in range(schdule[i][0],schdule[i][1]):
                    schdule_checker[working]=schdule_checker[working]-1

                fuel[i]=1

                if max_count==N:
                    return


    go(0)
    print("#{} ".format(tc),end='')
    print(max_count)

[베이비진게임]
TC=int(input())
for tc in range(1,TC+1):
    def is_babygin(A):
        checker = [0]*10
        triplet=0
        run=0
        is_run=0
        max_index=0
        ##체커에 데이터 넣기
        for d in A:
            if d.isdigit():
                checker[int(d)] = checker[int(d)]+1
                max_index=max_index+1
        ##run 검사
        for i in range(0,len(checker)):
            if (checker[i]!=0):
                is_run=is_run+1
                if(is_run==3):
                    run=run+1
                    is_run=0
                    checker[i]=checker[i]-1
                    checker[i-1]=checker[i-1]-1
                    checker[i-2]=checker[i-2]-1
            else:
                is_run=0
        ## triplet 검사
        for i in range(0,max_index):
            triplet=triplet+checker[i]//3
            checker[i]=checker[i]%3
        if(triplet+run>0):
            return 1
        else:
            return 0

    A=['a']*6
    B=['a']*6
    data=list(input().split())
    ans=0
    A_ans=0
    B_ans=0
    for i in range(0,len(data)):
        if i%2==0:
            A[i//2]=data[i]
        else:
            B[i//2]=data[i]

        A_ans=is_babygin(A)
        B_ans=is_babygin(B)
        if A_ans!=0 or B_ans!=0:
            break
    print("#{} ".format(tc),end="")
    if A_ans==B_ans:
        print(0)
    else:
        if A_ans==1:
            print(1)
        else:
            print(2)

[최적경로]
TC=int(input())
for tc in range(1,TC+1):
    N=int(input())

    data = list(map(int,input().split()))
    y_set=[]
    x_set=[]
    for i in range(0,len(data)):
        if i%2==0:
            y_set.append(data[i])
        else:
            x_set.append(data[i])
    start_y = y_set[0]
    start_x=x_set[0]

    end_y=y_set[1]
    end_x = x_set[1]

    y_set.pop(0)
    x_set.pop(0)
    y_set.pop(0)
    x_set.pop(0)

    data_index_fuel = [1]*N
    min_sum=987654321
    A_y=[0]*N
    A_x = [0] * N
    def go(now_index,this_sum):
        global min_sum
        if this_sum>=min_sum:
            return

        if now_index==N:
            this_sum = this_sum + abs(A_y[N-1] - end_y) + abs(A_x[N-1] - end_x)
            if(min_sum>this_sum):
                min_sum = this_sum
            return


        for i in range(0,N):
            if data_index_fuel[i] > 0:
                data_index_fuel[i]=0

                A_y[now_index] = y_set[i]
                A_x[now_index] = x_set[i]
                if now_index==0:
                    this_sum=this_sum+abs(A_y[now_index]-start_y)+abs(A_x[now_index]-start_x)
                if now_index>0:
                    this_sum=this_sum+abs(A_y[now_index]-A_y[now_index-1])+abs(A_x[now_index]-A_x[now_index-1])
                go(now_index+1,this_sum)
                if now_index==0:
                    this_sum=this_sum-abs(A_y[now_index]-start_y)-abs(A_x[now_index]-start_x)
                if now_index>0:
                    this_sum=this_sum-abs(A_y[now_index]-A_y[now_index-1])-abs(A_x[now_index]-A_x[now_index-1])
                data_index_fuel[i]= 1

    go(0,0)
    print("#{} ".format(tc),end='')
    print(min_sum)