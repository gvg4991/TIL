#최소합

import sys
sys.stdin = open("minsum.txt", "r")

T = int(input())

def issafe(y, x):
    if y < N and x < N:
        return True
    else:
        return False


def move(pan, y, x, num_sum):
    global min_sum

    if issafe(y, x):
        if num_sum + pan[y][x] > min_sum:
            return
        num_sum += pan[x][y]
        move(pan, y, x+1, num_sum)
        move(pan, y+1, x, num_sum)
        if x+1 == N and y+1 == N and min_sum > num_sum:
            min_sum = num_sum


for test_case in range(1, T+1):
    N = int(input())
    num_pan = [[0] * N for i in range(N)]
    min_sum = 1000000
    for num in range(N):
        num_pan[num] = list(map(int, input().split()))
    move(num_pan, 0, 0, 0)
    print("#%d %s" %(test_case, min_sum))

#동철이의 일 분배

import sys
sys.stdin = open("task_permutation.txt", "r")

T = int(input())

def issafe(y, x):
    if y < N and x < N:
        return True
    else:
        return False


def work(t_s, p_sum, y, x):
    global max_sum
    global task_table

    if issafe(y, x):
        if p_sum * t_s[y][x] * 0.01 < max_sum:
            return
        p_sum *= t_s[x][y] *0.01
        work(t_s, p_sum, y, x + 1)
        work(t_s, p_sum, y + 1, x)
        if x + 1 == N and y + 1 == N and p_sum > max_sum:
            max_sum = p_sum


for test_case in range(1, T+1):
    N = int(input())
    task_table = [[0] * N for person in range(N)]
    done_work = [0] * N
    done_worker = [0] * N
    max_sum = -1
    for task in range(N):
        task_table[task] = list(map(int, input().split()))
    work(task_table, 1, 0, 0)

    print("#%d %f" % (test_case, max_sum))