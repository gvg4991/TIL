##dfs


def issafe(y,x):
    if x < 0 or x > case-1 or y < 0 or y > case-1:
        return False
    else:
        return True

def miro(y,x):
    global result
    visited.append((y,x))
    
    if datas[y][x] == 3:
        result = 1
        return

    else:
        for delta in range(4):
            new_y = y+dy[delta]
            new_x = x+dx[delta]

            if issafe(new_y,new_x) and not (new_y,new_x) in visited and datas[new_y][new_x] != 1:
                now_y = new_y
                now_x = new_x

                miro(now_y,now_x)
                
    

test = int(input())
for tc in range(test):
    datas = []
    case = int(input())
    for row in range(case):
        datas += [list(map(int,input()))]

    start_y = start_x = None
    # end_y = end_x = None
    for row in range(case):
        for col in range(case):
            if datas[row][col] == 2:
                start_y = row
                start_x = col
                break

    dy = [-1, 0, 1, 0]
    dx = [0, 1, 0, -1]
    result = 0
    visited = []

    miro(start_y,start_x)

    if result == 1:
        print(f'#{tc+1} {1}')
    else:    
        print(f'#{tc+1} {0}')




#--------------------------------------------------------------------------------------------------------
##bfs


def issafe(y,x):
    if x < 0 or x > case-1 or y < 0 or y > case-1:
        return False
    else:
        return True

test = int(input())
for tc in range(test):
    datas = []
    case = int(input())
    for row in range(case):
        datas.append(list(map(int,input())))

    start_y = start_x = None
    for y in range(case):
        for x in range(case):
            if datas[y][x] == 2:
                now_y = y
                now_x = x

    dy = [-1, 0, 1, 0]
    dx = [0, 1, 0, -1]
    visited = []
    path_q = []
    path_q.append((now_y,now_x))
    result = 0

    while path_q != []:
        path = path_q.pop(0)
        now_y = path[0]
        now_x = path[1]
        visited.append((now_y,now_x))

        if datas[now_y][now_x] == 3:
            result = 1
            break

        else:
            for delta in range(4):
                new_y = now_y + dy[delta]
                new_x = now_x + dx[delta]

                if issafe(new_y,new_x) and not (new_y,new_x) in visited and datas[new_y][new_x] != 1:
                    y = new_y
                    x = new_x
                    path_q.append((y,x))

    print(f'#{tc+1} {result}')






#--------------------------------------------------------------------------------------------------------
##bfs distance


def issafe(y,x):
    if x < 0 or x > case-1 or y < 0 or y > case-1:
        return False
    else:
        return True

test = int(input())
for tc in range(test):
    datas = []
    case = int(input())
    for row in range(case):
        datas.append(list(map(int,input())))

    start_y = start_x = None
    for y in range(case):
        for x in range(case):
            if datas[y][x] == 2:
                now_y = y
                now_x = x
                break

    dy = [-1, 0, 1, 0]
    dx = [0, 1, 0, -1]
    visited = []
    path_q = []
    path_q.append((now_y,now_x))
    result = 0
    distance = [[0]*case for i in range(case)]

    while path_q != []:
        path = path_q.pop(0)
        now_y = path[0]
        now_x = path[1]
        visited.append((now_y,now_x))

        if datas[now_y][now_x] == 3:
            result = 1
            break

        else:
            for delta in range(4):
                new_y = now_y + dy[delta]
                new_x = now_x + dx[delta]

                if issafe(new_y,new_x) and not (new_y,new_x) in visited and datas[new_y][new_x] != 1:
                    y = new_y
                    x = new_x
                    path_q.append((y,x))
                    distance[y][x] = distance[now_y][now_x] + 1
    
    if result == 1: 
        print(f'#{tc+1} {distance[now_y][now_x]-1}')
    else:
        print(f'#{tc+1} {0}')

























--------------------------------------
def issafe(y,x):
    if x < 0 or x > case-1 or y < 0 or y > case-1:
        return False
    else:
        return True

test = int(input())
for tc in range(test):
    datas = []
    case = int(input())
    for row in range(case):
        datas += (list(map(int,input())))

    start_y = start_x = None
    for y in range(case):
        for x in range(case):
            if datas[y][x] == 2:
                now_y = y
                now_x = x
                break

    dy = [-1, 0, 1, 0]
    dx = [0, 1, 0, -1]
    visited = []
    path_q = []
    path_q.append((now_y,now_x))
    result = 0

    while path_q != []:
        path = path_q.pop(0)
        now_y = path[0]
        now_x = path[1]
        visited.append((now_y,now_x))

        if datas[now_y][now_x] == 3:
            result = 1
            break

        else:
            for delta in range(4):
                new_y = now_y + dy[delta]
                new_x = now_x + dx[delta]

                if issafe(new_y,new_x) and not [new_y,new_x] in visited and datas[new_y][new_x] != 1:
                    y = new_y
                    x = new_x
                    path_q.append((y,x))

    print(f'#{tc+1} {result}')