#중복 조합

nn = 5
rr = 3
IsUsed = [0]*(rr+1)


def GetSome(n , r):
    if r > rr :
        for i in range(1, rr+1):
              print(IsUsed[i], end=' ')
        print()
        return
    if n > nn : return
    IsUsed[r] = n
    GetSome(n, r + 1)
    GetSome(n + 1, r)


GetSome(1,1)

#합이 100인 자연수의 해

def natural_sum():
    cnt = 0
    for x in range(1, 100 + 1):
        for y in range(x, 100 - x + 1):
            for z in range(y, 100 - x - y + 1):
                if x+y+z == 100:
                    cnt += 1
                    break
    return cnt


visited = [[[0]*100 for i in range(100)] for j in range(100)]
count = 0


def natural_recursion(x, y, z):
    global count
    if x+y+z > 100:
        return
    if x>y or y>z:
        return
    if x+y+z == 100:
        count +=1
        return
    if visited[x+1][y][z] == False:
        visited[x+1][y][z]=True
        natural_recursion(x+1, y, z)
    if visited[x][y+1][z]==False:
        visited[x][y + 1][z] = True
        natural_recursion(x, y + 1, z)
    if visited[x][y][z+1] == False:
        visited[x][y][z + 1] = True
        natural_recursion(x, y, z+1)

# print(natural_sum())
natural_recursion(1,1,1)
print(count)

#구간 합

data = [5, 1, -4, 3, -1, -5, -2, 8, -3, 6]

rangesum = [0 for i in range(len(data))]
included = [0 for i in range(len(data))]

for i in range(len(data)):
    if not rangesum:
        rangesum[i] = data[i]
    else:
        rangesum[i] = max(rangesum[i-1]+data[i], data[i])
        if rangesum[i] == rangesum[i-1]+data[i]:
            included[i] = 1

print(max(rangesum))
j = rangesum.index(max(rangesum))

while included[j]:
    if included[j]:
        print(data[j], end = ' ')
        j -= 1
print(data[j])