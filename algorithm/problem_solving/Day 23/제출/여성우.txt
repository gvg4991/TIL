1. 진수 변환
n = 123
k = 7
answer = []
while n > 0:
    answer.append(n % k)
    n //= k
print(*reversed(answer), sep='')

2. 16->2
for T in range(int(input())):
    N, ls = input().split()
    dic = {'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}
    bits = []
    bi = 0
    for i in ls:
        now = i
        if now.isdigit():
            now = int(now)
        else:
            now = dic[now]
        for j in range(3, -1, -1):
            if now >= (1 << j):
                bits.append('1')
                now -= 1 << j
                bi += 1
            else:
                bits.append('0')
                bi += 1
    print('#{} '.format(T+1), end='')
    print(*bits, sep='')

3. 소수 이진수
for T in range(int(input())):
    N = float(input())
    print('#%d'%(T+1), end=' ')
    answer = []
    while N != 0:
        if N * 2 >= 1:
            N = N * 2 - 1
            answer.append(1)
        else:
            answer.append(0)
            N = N * 2
        if len(answer) > 12:
            print('overflow')
            break
    if len(answer) <= 12:
        print(*answer, sep='')

4. 정식이 은행
for T in range(int(input())):
    bi = input()
    tri = input()
    binum = 0
    trinum = 0
    for _ in range(len(bi)):
        binum = binum * 2 + int(bi[_])
    for _ in range(len(tri)):
        trinum = trinum * 3 + int(tri[_]) * 1
    dp = [0] * len(bi)
    for _ in range(len(bi)):
        if bi[_] == '1':
            dp[_] = binum - 2 ** (len(bi) - 1 - _)
        else:
            dp[_] = binum + 2 ** (len(bi) - 1 - _)
    for i in range(len(tri)):
        tag = 3 ** (len(tri) - 1 - i)
        for j in range(3):
            if j != int(tri[i]):
                _trinum = trinum - int(tri[i]) * tag
                _trinum += tag * j
                if _trinum in dp:
                    answer = _trinum
                    break
    print('#{} {}'.format(T+1, answer))

5. 암호코드
def safe(y, x):
    if y >= 0 and signal[y][x] == '0':
        return True


for T in range(int(input())):
    N, M = map(int, input().split())
    password = [[3, 2, 1, 1], [2, 2, 2, 1], [2, 1, 2, 2], [1, 4, 1, 1], [1, 1, 3, 2], [1, 2, 3, 1], [1, 1, 1, 4], [1, 3, 1, 2], [1, 2, 1, 3], [3, 1, 1, 2]]
    sixteen = [bin(_)[2:].zfill(4) for _ in range(16)]
    signal = []
    cord = []
    answer = 0
    for _ in range(N):
        signal.append(input())
    for i in range(N):
        lineend = 0
        for j in range(M-1, -1, -1):
            if signal[i][j] != '0' and safe(i-1, j):
                lineend = j
                break
        c = []
        if lineend:
            for k in range(j+1):
                if signal[i][k] != '0' and not safe(i-1, k):
                    c.append('0')
                elif signal[i][k] != '0' and safe(i-1, k):
                    c.append(signal[i][k])
                else:
                    c.append('0')
        if c:
            cord.append(c)
    for i in cord:
        bincord = []
        for j in range(len(i)):
            if i[j].isdigit():
                sixteentag = int(i[j])
            else:
                sixteentag = ord(i[j]) - 55
            for _ in sixteen[sixteentag]:
                bincord.append(_)
        for _ in range(len(bincord)-1, -1, -1):
            if bincord[_] == '0':
                bincord.pop()
            else:
                break
        nums = []
        j = 0
        zerocount = 0
        onecount = 0
        restart = 0
        while j < len(bincord):
            if bincord[j] == '0':
                zerocount += 1
                if onecount:
                    nums.append(onecount)
                    onecount = 0
            elif bincord[j] == '1' and j != len(bincord) - 1:
                onecount += 1
                if zerocount:
                    nums.append(zerocount)
                    zerocount = 0
            elif bincord[j] == '1' and j == len(bincord) - 1:
                if zerocount:
                    nums.append(zerocount)
                    zerocount = 0
                onecount += 1
                nums.append(onecount)
            j += 1
        nowcode = []
        j = 0
        restart = 2
        while j < len(nums) - 3:
            if not nowcode:
                restart = j + 2
            now = list(map(int, nums[j:j+4]))
            tag = min(now)
            for _ in range(4):
                now[_] //= tag
            code = False
            if not nowcode:
                for _ in range(10):
                    if password[_][1:] == now[1:] and password[_][0] <= now[0]:
                        nowcode.append(_)
                        code = True
                        break
            elif j == len(nums) - 4:
                for _ in range(10):
                    if password[_][:3] == now[:3] and password[_][3] <= now[3]:
                        nowcode.append(_)
                        code = True
                        break
            else:
                for _ in range(10):
                    if password[_] == now:
                        nowcode.append(_)
                        code = True
                        break
            if not code:
                if nowcode:
                    nowcode = []
                    j = restart
                else:
                    j += 2
            if code:
                j += 4
            if len(nowcode) == 8:
                check = 0
                for _ in range(8):
                    if _ % 2:
                        check += nowcode[_]
                    else:
                        check += nowcode[_] * 3
                if check % 10 == 0:
                    answer += sum(nowcode)
                nowcode = []
    print('#{} {}'.format(T+1, answer))
