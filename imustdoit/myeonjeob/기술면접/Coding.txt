중요 개념

좋은 코드
 . 읽기 쉬운 코드, 중복이 없는 코드, 테스트가 용이한 코드
클린코드
 . 가독성이 높은 코드
 . 네이밍, 오류가없음, 중복없음, 의존성 줄임, 클래스가 한가지 일만 처리


객체 지향 프로그래밍 (OOP, Object Orient Programming)
 . 객체 단위로 코드를 나눠 디버깅이 쉽고 유지보수에 용이
 . 이미 작성한 코드의 재사용성이 높음
1) 추상화
 . 세부 사물의 공통점을 파악 후 하나의 집합으로 만듬
 ex) 아우디, 벤츠를 자동차라는 공통의 추상화 집합으로 만듬
 . 필요로 하는 속성이나 행동을 추출
 . 자식 클래스들의 공통분모 역할만을 위한 클래스
2) 캡슐화
 . 낮은 결합도를 유지할 수 있도록 설계
 . 한 곳에서 변화가 생겨도 다른 곳에 영향을 최소화
 . 정보은닉을 통해 높은 응집도와 낮은 결합도 갖게함
3) 상속
 . 부모클래스에서 더 필요한 것들을 추가한 자식클래스를 만듬
 . 부모클래스의 변수와 메소드들을 그대로 물려받음
- 인터페이스 : 물려받는게 아니라 장착하는것
  ex) 공대생이라는 상속에서 한식자격증 장착
4) 다형성
 . 부모클래스의 메소드를 자식 클래스가 오버라이딩 해서 자신의 역할로 활용
 . 서로다른 객체가 같은 메세지를 받았을 때 각자의 방식으로 동작
5) 은닉성
 . 내부구조는 감추고 외부에서 조작할 수 있는 명령어만 공개

프로시저
 . 반환값이 별도로 존재하지 않는 함수
  ex) printf와 같이 반환값 얻는것보다 화면에 출력하는 용도의 함수
 . 객체 내부에 자료형(필드)과 함수(메소드)가 같이 존재

REST API
 . 웹(HTTP) 장점을 활용한 아키텍쳐
- 요소
 . Method : POST / GET / PUT / DELETE
 . 리소스
 . Message : JSON, XML

TDD (Test Driver Development)
 . 테스트 주도 개발
 . 테스트를 먼저 만들고 테스트를 통과하기 위한 코드를 짬
 . 디자인 > 테스트케이스 작성 > 코드 개발 > 리펙토링 > 디자인 수정
- 장점
 . 작업과 동시에 테스트 진행하면서 실시가 오류 파악 가능
 . 시스템 결함 방지
 . 짧은 개발 주기로 요구사항 수용 가능, 피드백 가능
- 단점
 . 테스트케이스 설계단계가 추가되어 비용 증가

디버그
 . 소프트웨어에서 발생하는 문제의 원인을 찾아 해결하는 과정

컴파일
 . 우리가 작성한 코드를 컴퓨터 언어로 번역
 . 코드로 짜인 SW 돌리기전 미리 번역을 하는 것
 . 컴파일러 언어 : C, C++, JAVA
 . 미리 번역된 코드를 읽기만 하면돼서 실행속도 빠름

인터프리터
 . 실행될때마다 코드를 컴퓨터 언어로 번역함
 . 컴파일 과정이 필요없음
 . 코드 수정이 잦을때 편함
 . 컴파일 언어보다 느리며, 코드가 그래도 노출될 수 있음
 . python, JavaScript

빌드
 . 수많은 프로그램코드 파일들을 배포하기 위해 압축하거나 변경함
 . 컴파일러 언어는 빌드에 컴파일과정이 포함됨
 . 하나의 실행파일로 만들고 용량을 줄이며, 코드를 난독화함

배포
 . 코딩한 SW를 사용자들이 쓸 수 있도록하는 과정

환경변수
 . SW가 돌아가는 환경마다 특정 변수명에 지정된 값
 . 각자의 환경에 지정된 변수들을 기준으로 동작
 . 이 컴퓨터의 조건이나 용도에 맞게 sw돌도록 함
 . 보안상 민감한 정보들을 코드로 분리

라이브러리
 . 자주 사용되는 로직을 재사용하기 편리하도록 구성
 . 특정 기능들을 코드로 작성해 놓은 것

프레임워크
 . 특정 형태의 sw기본 틀로 프레임워크 위에 코드를 덧붙임
 . 스프링, 장고 등
 . SW의 설계와 구현을 재사용 가능하게 협업화된 형태로 클래스들을 제공

SVN / GIT
 . 형상관리 툴
 . 소스의 변화를 끊임없이 관리
 . 소스를 버전별로 관리하고 원복가능

WEB server / WAS
 . 

애자일 방법론
 . 실질적인 코딩을 기반으로 일정한 주기에 따라 지속적으로 프로토타입을 형성하고, 필요한 요구사항을 파악하며 즉시 수정사항을 적용하여 결과적으로 하나의 큰 소프트웨어를 개발하는 적응형 개발 방법
 . 개발 과정에서 시스템 변경사항을 유연하게 대응
 . 협력과 피드백을 더 자주하고 빨리하는 것
 . 고객 요구 수용 > 우선 시행 후 주기적인 점검 > 시연을 통해 피드백 > 내부구조 형성을 통한 비용 절감
 . 스탠드업 미팅

에브옵스(DevOps)
 . 애자일 기법과 지속적 통합 
 . 소프트웨어 제품을 빠른 시간에 개발 및 배포 하는것

- 스크럼
 . 애자일 방법론 중 하나
 . 회의를 통해 스프린트 개발 주기 정함, 주기마다 계획들 구현
 . 하나의 스프린트가 끝날때마다 검토하여 피드백 받음
