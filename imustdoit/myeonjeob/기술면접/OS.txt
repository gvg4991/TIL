운영체제
 . 시스템의 자원과 동작을 관리하는 시스템 소프트웨어
 . 프로세스 관리, 저장장치 관리, 네트워킹, 사용자관리, 디바이스 드라이버

1) 프로세스 관리
 . 응용프로그램 관리
 . CPU를 프로세스에 할당, 프로세스 間 공유 자원 접근 관리

2) 저장장치의 관리
 . 1차 저장장치 main memory
 . 2처 저장장치 HDD, NAND Flash Memory

3) 네트워킹
 . TCP/IP 기반의 인터넷에 연결

4) 사용자 관리
 . 여러사람 각자의 계정을 만들어 사용

5) 디바이스 드라이버
 . 여러 하드웨어를 운영체제에서 인식하고 관리하게 만듬



=========================================



프로세스
 . 프로그램이 실행중인 상태
 . 메모리에 적재되어 CPU할당 받음
 . 최소 1개의 스레드 소유
 . 프로세스들은 컴퓨터 자원을 분할해서 사용 (공유하는 자원 없음)
1) 동시성 : 프로세서가 여러 작업을 돌아가면서 일부분씩 함
2) 병렬성 : 프로세서에 코어가 여러개 달려 동시에 작업을 수행(듀얼코어, 쿼드코어)
 . 프로그램 실행 > 프로세스 생성 > 프로세스 주소공간 생성 > 메타데이터 PCB에 저장

- PCB (process control block)
 . 프로세스에 대한 중요한 정보를 저장하는 OS자료구조
 . 프로세스 메타데이터 : process ID, process State, Owner, CPU usage, Memory usage 등
 . interrupt 발생 시 프로세스가 waiting 상태에서 다시 수행할 대기중인 프로세스 저장

- 멀티 프로세스
 . context switch로 진행 : 프로세스의 상태를 PCB에 저장하고 복원하는 과정
 . 하나의 프로세스가 죽어도 다른 프로세스에 영향 없음
 . 많은 메모리 공간과 CPU 시간 차지

- 프로세스 주소 공간
 . 최대한 데이터를 공유하여 메모리 사용 줄임
 . 코드 segment : 프로그램 소스 코드 저장
 . 데이터 segment : 전역변수 저장
 . 스택 segment : 함수, 지역변수 저장

- IPC (Inter Process Communication)
 . 독립적인 프로세스 간 통신을 가능하도록 해줌



===========================================


스레드
 . 프로세스의 실행 단위 : 한 프로세스 내에서 여러 갈래 작업이 진행

- 멀티스레드
 . 메모리 공간과 시스템 자원 소모를 줄임
 . 프로세스마다 주어진 전체 자원을 함께 사용
 . 프로세스 내 공유된 변수에 스레드 두개가 동시에 사용하면 error
 . Critical Section 기법으로 동기화하여 문제 해결


=========================================


스케줄러
 . CPU를 잘 사용하기 위해 프로세스를 스케줄링
 . 오버해드 감소, 사용률 증가, 기아현상 감소
- 선점 스케줄링 : OS가 CPU 사용권 선점, 회수 하는 경우 (round robin)
- 비선점 스케줄링 : 처리시간 예측 어려운 경우 (FCFS)

FCFS (First Come First Served)
 . 큐에 도착한 순서대로 CPU할당
 . 실행시간이 짧은게 뒤로가면 평균 대기시간이 길어짐

라운드 로빈(Round Robin)
 . 현대적인 CPU 스케줄링, 선점 스케줄링
 . 각 프로세스는 동일한 크기의 시간 할당(time quantum), 할당시간이 지나면 queue 젤 뒤
 . 응답속도가 빠름, 공정한 스케줄링
 . 할당시간이 너무 작아지면 잦은 context switch로 overhead 발생


============================================


인터럽트(interrupt)
 . 긴급상황 발생 시 현재 실행중인 작업을 중단하고 발생된 상황 우선 처리하도록 CPU에 알림
 . 발생시기 예측하기 힘든 경우, 컨트롤러가 가장 빠르게 대응하는 방법
- 폴링(Polling) : 인터럽트 없으면 컨트롤러가 계속 체크해야됨



=============================================



데드락 (DeadLock) - 교착상태
 . 교착상태 : 프로세스가 자원을 못받아서 처리하지 못하는 상태
 . 한정적 자원을 여러곳에서 사용할때 발생
ex) 서로 원하는 자원을 상대 프로세스에 할당되어 있을때 무한정 wait

- 발생조건
1) 상호 배제 : 자원은 한번에 한 프로세스만 사용
2) 점유 대기 : 하나의 자원 점유하면서 다른 프로세스의 자원을 추가로 점유하기 위해 대기하는 프로세스 존재
3) 비선점 : 다른 프로세스에 할당된 자원은 강제로 못빼앗음
4) 순환대기 : 프로세스 집합에서 순환 형태로 자원을 대기

- 처리
1) 예방 : 교착상태 발생 조건 중 하나 제거 > 자원낭비가 심해짐
2) 회피 : 교착상태 발생 시 피해나감
    . 은행원 알고리즘(Banker's Algorithm) : 자원 할당 후에도 안정상태 인지 검사하여 교착 상태 회피(안정상태면 자원 할당, 아니면 대기)



=============================================


동기화(Sync)
 . 해야할 task를 순차적으로 처리
 . 메소드를 실행시킴과 동시에 반환값 기대 (값이 반환되기 전까지 blocking)

비동기화
 . task를 진행중에 다른 task 처리 가능
 . blocking 없이 이벤트 큐에 넣거나 백그라운드 스레드에 위임



=============================================



세마포어
 . 공유된 자원에 여러 프로세스가 접근하는 것을 막음
 . 멀티프로그래밍 환경에서 공유 자원에 대한 접근 제한
 . 임계구역 : 각 프로세스에서 공유 데이터 접근하는 코드 부분 (접근할때 P, 나올때 V)
 . P,V를 수행하는 동안 인터럽트 안당함


뮤텍스
 . 공유된 자원에 여러 스레드가 접근하는 것을 막음
 . 임계 구역을 가진 스레드들의 실행시간이 안겹치게 실행
 . 임계구역 접근 조율을 위핸 lock, unlock 사용
 . 제과점 알고리즘 : 가장 작은 수험표를 가진 프로세스가 임계구역 진입




=============================================


연속 메모리 관리
 . 프로그램 전체가 하나의 커다란 공간에 연속적으로 할당

불연속 메모리 관리
 . 프로그램 일부가 서로 다른 주소공간에 할당될 수 있음
- 페이징 : 고정 크기
- 세그먼트 : 서로 다른 크기를 가진 논리적 블록이 연속 공간에 배치


메인 메모리
 . CPU가 직접 접근할 수 있는 접근장치
 . 프로세스가 실행되려면 프로그램이 메모리에 올라와야됨

캐시 메모리
 . 주기억장치에 저장된 내용의 일부를 임시로 저장해두는 기억장치
 . 성능저하를 방지하기 위함

지역성
 . 기억 장치 內 정보를 한순간에 특정부분을 집중적으로 참조

=============================================



